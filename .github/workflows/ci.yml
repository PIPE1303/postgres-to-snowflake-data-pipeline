name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest tests/ -v
    
    - name: Validate DAGs
      run: |
        python -c "
        import sys
        import os
        sys.path.append('dags')
        os.environ['AIRFLOW_HOME'] = '/tmp/airflow'
        os.environ['AIRFLOW__CORE__DAGS_FOLDER'] = 'dags'
        os.environ['AIRFLOW__CORE__LOAD_EXAMPLES'] = 'False'
        try:
            from airflow.models import DagBag
            dag_bag = DagBag()
            if dag_bag.import_errors:
                print('DAG Import Errors:')
                for dag_id, error in dag_bag.import_errors.items():
                    print(f'{dag_id}: {error}')
                sys.exit(1)
            print('All DAGs imported successfully!')
        except Exception as e:
            print(f'Error validating DAGs: {e}')
            sys.exit(1)
        "

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
